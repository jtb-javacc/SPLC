/* Generated By:JJTree: Do not edit this line. ASTEQNode.cc Version 7.0 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=true,NODE_PREFIX=AST,NODE_EXTENDS=MyNode,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
#include "ASTEQNode.h"
#include "Boolean.h"
#include "Integer.h"

  
  ASTEQNode::ASTEQNode(int id) : SimpleNode(id) {
  }
  ASTEQNode::ASTEQNode(SPLParser *parser, int id) : SimpleNode(parser, id) {
  }
  ASTEQNode::~ASTEQNode() {
  }

  void ASTEQNode::interpret()
  {
     jjtGetChild(0)->interpret();
     jjtGetChild(1)->interpret();

 	 const Node* top = stack.top();
	 if (typeid(*top) == typeid(Boolean)) {
		 unique_ptr<Boolean> left((Boolean*)stack.top()); stack.pop();
		 unique_ptr<Boolean> right((Boolean*)stack.top()); stack.pop();
		 stack.push(new Boolean(*left == *right));

	 } else {
		 unique_ptr<Integer> left((Integer*)stack.top()); stack.pop();
		 unique_ptr<Integer> right((Integer*)stack.top()); stack.pop();
		 stack.push(new Boolean(*left == *right));
	 }
  }

