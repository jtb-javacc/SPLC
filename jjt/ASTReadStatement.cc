/* Generated By:JJTree: Do not edit this line. ASTReadStatement.cc Version 7.0 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=true,NODE_PREFIX=AST,NODE_EXTENDS=MyNode,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
#include "ASTReadStatement.h"

  
  ASTReadStatement::ASTReadStatement(int id) : SimpleNode(id) {
  }
  ASTReadStatement::ASTReadStatement(SPLParser *parser, int id) : SimpleNode(parser, id) {
  }
  ASTReadStatement::~ASTReadStatement() {
  }

  void ASTReadStatement::interpret() {
    Object o;
    char[] b = new char[64];

    if ((o = symtab.get(name)) == null)
      System.err.println("Undefined variable : " + name);

    try {
      if (o instanceof Boolean) {
        out.write("Enter a value for \'" + name + "\' (boolean) : ");
        out.flush();
        in.read(b);
        symtab.put(name, new Boolean((new String(b)).trim()));
      } else if (o instanceof Integer) {
        out.write("Enter a value for \'" + name + "\' (int) : ");
        out.flush();
        in.read(b);
        symtab.put(name, new Integer((new String(b)).trim()));
      }
    } catch (IOException e) {
      e.printStackTrace();
      System.exit(1);
    }
  }

